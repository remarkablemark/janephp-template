<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Petstore\Endpoint;

class GetOrderById extends \Petstore\Runtime\Client\BaseEndpoint implements \Petstore\Runtime\Client\Endpoint
{
    use \Petstore\Runtime\Client\EndpointTrait;
    protected $orderId;
    protected $accept;

    /**
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
     *
     * @param int   $orderId ID of order that needs to be fetched
     * @param array $accept  Accept content header application/json|application/xml
     */
    public function __construct(int $orderId, array $accept = [])
    {
        $this->orderId = $orderId;
        $this->accept = $accept;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{orderId}'], [$this->orderId], '/store/order/{orderId}');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        if (empty($this->accept)) {
            return ['Accept' => ['application/json', 'application/xml']];
        }

        return $this->accept;
    }

    /**
     * @return \Petstore\Model\Order|null
     *
     * @throws \Petstore\Exception\GetOrderByIdBadRequestException
     * @throws \Petstore\Exception\GetOrderByIdNotFoundException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'Petstore\Model\Order', 'json');
        }
        if (400 === $status) {
            throw new \Petstore\Exception\GetOrderByIdBadRequestException($response);
        }
        if (404 === $status) {
            throw new \Petstore\Exception\GetOrderByIdNotFoundException($response);
        }

        return null;
    }

    public function getAuthenticationScopes(): array
    {
        return [];
    }
}
