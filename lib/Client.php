<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Petstore;

class Client extends Runtime\Client\Client
{
    /**
     * Add a new pet to the store.
     *
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     * @param array  $accept Accept content header application/json|application/xml
     *
     * @return Model\Pet|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\AddPetBadRequestException
     * @throws Exception\AddPetUnprocessableEntityException
     */
    public function addPet(Model\Pet $requestBody, string $fetch = self::FETCH_OBJECT, array $accept = [])
    {
        return $this->executeEndpoint(new Endpoint\AddPet($requestBody, $accept), $fetch);
    }

    /**
     * Update an existing pet by Id.
     *
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     * @param array  $accept Accept content header application/json|application/xml
     *
     * @return Model\Pet|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\UpdatePetBadRequestException
     * @throws Exception\UpdatePetNotFoundException
     * @throws Exception\UpdatePetUnprocessableEntityException
     */
    public function updatePet(Model\Pet $requestBody, string $fetch = self::FETCH_OBJECT, array $accept = [])
    {
        return $this->executeEndpoint(new Endpoint\UpdatePet($requestBody, $accept), $fetch);
    }

    /**
     * Multiple status values can be provided with comma separated strings.
     *
     * @param array $queryParameters {
     *
     * @var string $status Status values that need to be considered for filter
     *             }
     *
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     * @param array  $accept Accept content header application/json|application/xml
     *
     * @return Model\Pet[]|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\FindPetsByStatusBadRequestException
     */
    public function findPetsByStatus(array $queryParameters = [], string $fetch = self::FETCH_OBJECT, array $accept = [])
    {
        return $this->executeEndpoint(new Endpoint\FindPetsByStatus($queryParameters, $accept), $fetch);
    }

    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     *
     * @param array $queryParameters {
     *
     * @var array $tags Tags to filter by
     *            }
     *
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     * @param array  $accept Accept content header application/json|application/xml
     *
     * @return Model\Pet[]|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\FindPetsByTagsBadRequestException
     */
    public function findPetsByTags(array $queryParameters = [], string $fetch = self::FETCH_OBJECT, array $accept = [])
    {
        return $this->executeEndpoint(new Endpoint\FindPetsByTags($queryParameters, $accept), $fetch);
    }

    /**
     * Delete a pet.
     *
     * @param int   $petId            Pet id to delete
     * @param array $headerParameters {
     *
     * @var string $api_key
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeletePetBadRequestException
     */
    public function deletePet(int $petId, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeletePet($petId, $headerParameters), $fetch);
    }

    /**
     * Returns a single pet.
     *
     * @param int    $petId  ID of pet to return
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     * @param array  $accept Accept content header application/json|application/xml
     *
     * @return Model\Pet|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetPetByIdBadRequestException
     * @throws Exception\GetPetByIdNotFoundException
     */
    public function getPetById(int $petId, string $fetch = self::FETCH_OBJECT, array $accept = [])
    {
        return $this->executeEndpoint(new Endpoint\GetPetById($petId, $accept), $fetch);
    }

    /**
     * Updates a pet resource based on the form data.
     *
     * @param int   $petId           ID of pet that needs to be updated
     * @param array $queryParameters {
     *
     * @var string $name Name of pet that needs to be updated
     * @var string $status Status of pet that needs to be updated
     *             }
     *
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     * @param array  $accept Accept content header application/json|application/xml
     *
     * @return Model\Pet|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\UpdatePetWithFormBadRequestException
     */
    public function updatePetWithForm(int $petId, array $queryParameters = [], string $fetch = self::FETCH_OBJECT, array $accept = [])
    {
        return $this->executeEndpoint(new Endpoint\UpdatePetWithForm($petId, $queryParameters, $accept), $fetch);
    }

    /**
     * Upload image of the pet.
     *
     * @param int                                                    $petId           ID of pet to update
     * @param string|resource|\Psr\Http\Message\StreamInterface|null $requestBody
     * @param array                                                  $queryParameters {
     *
     * @var string $additionalMetadata Additional Metadata
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\ApiResponse|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\UploadFileBadRequestException
     * @throws Exception\UploadFileNotFoundException
     */
    public function uploadFile(int $petId, $requestBody = null, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\UploadFile($petId, $requestBody, $queryParameters), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function getInventory(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetInventory(), $fetch);
    }

    /**
     * Place a new order in the store.
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\Order|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\PlaceOrderBadRequestException
     * @throws Exception\PlaceOrderUnprocessableEntityException
     */
    public function placeOrder(?Model\Order $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\PlaceOrder($requestBody), $fetch);
    }

    /**
     * For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
     *
     * @param int    $orderId ID of the order that needs to be deleted
     * @param string $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteOrderBadRequestException
     * @throws Exception\DeleteOrderNotFoundException
     */
    public function deleteOrder(int $orderId, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteOrder($orderId), $fetch);
    }

    /**
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
     *
     * @param int    $orderId ID of order that needs to be fetched
     * @param string $fetch   Fetch mode to use (can be OBJECT or RESPONSE)
     * @param array  $accept  Accept content header application/json|application/xml
     *
     * @return Model\Order|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetOrderByIdBadRequestException
     * @throws Exception\GetOrderByIdNotFoundException
     */
    public function getOrderById(int $orderId, string $fetch = self::FETCH_OBJECT, array $accept = [])
    {
        return $this->executeEndpoint(new Endpoint\GetOrderById($orderId, $accept), $fetch);
    }

    /**
     * This can only be done by the logged in user.
     *
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     * @param array  $accept Accept content header application/json|application/xml
     *
     * @return Model\User|\Psr\Http\Message\ResponseInterface|null
     */
    public function createUser(?Model\User $requestBody = null, string $fetch = self::FETCH_OBJECT, array $accept = [])
    {
        return $this->executeEndpoint(new Endpoint\CreateUser($requestBody, $accept), $fetch);
    }

    /**
     * Creates list of users with given input array.
     *
     * @param Model\User[]|null $requestBody
     * @param string            $fetch       Fetch mode to use (can be OBJECT or RESPONSE)
     * @param array             $accept      Accept content header application/json|application/xml
     *
     * @return Model\User|\Psr\Http\Message\ResponseInterface|null
     */
    public function createUsersWithListInput(?array $requestBody = null, string $fetch = self::FETCH_OBJECT, array $accept = [])
    {
        return $this->executeEndpoint(new Endpoint\CreateUsersWithListInput($requestBody, $accept), $fetch);
    }

    /**
     * Log into the system.
     *
     * @param array $queryParameters {
     *
     * @var string $username The user name for login
     * @var string $password The password for login in clear text
     *             }
     *
     * @param string $fetch  Fetch mode to use (can be OBJECT or RESPONSE)
     * @param array  $accept Accept content header application/xml|application/json
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\LoginUserBadRequestException
     */
    public function loginUser(array $queryParameters = [], string $fetch = self::FETCH_OBJECT, array $accept = [])
    {
        return $this->executeEndpoint(new Endpoint\LoginUser($queryParameters, $accept), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     */
    public function logoutUser(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\LogoutUser(), $fetch);
    }

    /**
     * This can only be done by the logged in user.
     *
     * @param string $username The name that needs to be deleted
     * @param string $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteUserBadRequestException
     * @throws Exception\DeleteUserNotFoundException
     */
    public function deleteUser(string $username, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteUser($username), $fetch);
    }

    /**
     * Get user detail based on username.
     *
     * @param string $username The name that needs to be fetched. Use user1 for testing
     * @param string $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     * @param array  $accept   Accept content header application/json|application/xml
     *
     * @return Model\User|\Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetUserByNameBadRequestException
     * @throws Exception\GetUserByNameNotFoundException
     */
    public function getUserByName(string $username, string $fetch = self::FETCH_OBJECT, array $accept = [])
    {
        return $this->executeEndpoint(new Endpoint\GetUserByName($username, $accept), $fetch);
    }

    /**
     * This can only be done by the logged in user.
     *
     * @param string $username name that need to be deleted
     * @param string $fetch    Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\UpdateUserBadRequestException
     * @throws Exception\UpdateUserNotFoundException
     */
    public function updateUser(string $username, ?Model\User $requestBody = null, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\UpdateUser($username, $requestBody), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = \Http\Discovery\Psr17FactoryDiscovery::findUriFactory()->createUri('/api/v3');
            $plugins[] = new \Http\Client\Common\Plugin\AddPathPlugin($uri);
            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new Normalizer\JaneObjectNormalizer()];
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
